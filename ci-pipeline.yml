trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

steps:
- task: replacetokens@3
  displayName: 'Replace tokens appsettings'
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)'
    targetFiles: '**/appsettings.*.json'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    enableTelemetry: false

# - task: Bash@3
#   displayName: 'Build and Run Unit Tests'
#   inputs:
#     targetType: 'inline'
#     script: |
#       docker build -f ./Dockerfile --target build -t webapplication1:$(build.buildid) . 
#       docker create -ti --name testcontainer webapplication1:$(build.buildid) 
#       docker cp testcontainer:/src/WebApplication1.UnitTests/TestResults/ $(Build.ArtifactStagingDirectory)/testresults 
#       docker rm -fv testcontainer

- task: replacetokens@3
  displayName: 'Replace tokens docker-deploy.yml'
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)'
    targetFiles: '**/docker-deploy.yml'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    enableTelemetry: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish docker-deploy.yml'
  inputs:
    PathtoPublish: 'docker-deploy.yml'
    ArtifactName: 'drop'
    publishLocation: 'Container'
- task: Docker@2
  displayName: 'Restore, Build & UnitTest'
  inputs:
    containerRegistry: 'GitLabRegistry/ferranramirez'
    repository: 'notguiri/$(projectName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: '$(Build.SourceBranchName)'
    arguments: '--build-arg PAT=$(PAT)'
    addPipelineData: false

- task: Bash@3
  displayName: 'Copy TestResults out of Docker'
  inputs:
    targetType: 'inline'
    script: |
      echo 'docker images'
      docker images
      echo 'docker ps'
      docker ps
      echo 'docker create'
      docker create -ti --name testcontainer registry.gitlab.com/notguiri/$(projectName):$(Build.SourceBranchName)
      echo 'docker cp'
      docker cp testcontainer:/api/tst/NG.Auth.Test.UnitTest/TestResults/ $(Build.ArtifactStagingDirectory)/TestResults
      echo 'docker rm'
      docker rm -fv testcontainer
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'XUnit'
    testResultsFiles: '*.trx'
    searchFolder: '$(Build.ArtifactStagingDirectory)/TestResults'


- task: Docker@2
  displayName: 'Docker Push'
  inputs:
    containerRegistry: 'GitLabRegistry/ferranramirez'
    repository: 'notguiri/$(projectName)'
    command: 'push'
    tags: '$(Build.SourceBranchName)'
    addPipelineData: false